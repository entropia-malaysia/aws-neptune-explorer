@{
    ViewData["Title"] = "Gremlin";
}


<link rel="stylesheet" href="~/css/jquery.json-viewer.css" />

<style>
    .loader {
  height: 2px;
  width: 100%;
  position: relative;
  overflow: hidden;
  background-color: #ddd;
}
.loader:before{
  display: block;
  position: absolute;
  content: "";
  left: -200px;
  width: 200px;
  height: 2px;
  background-color: #2c2e3e;
  animation: loading 2s linear infinite;
}

@@keyframes loading {
    from {left: -200px; width: 30%;}
    50% {width: 30%;}
    70% {width: 70%;}
    80% { left: 50%;}
    95% {left: 120%;}
    to {left: 100%;}
}

#cy {
  width: 700px;
  height: 600px;
  display: block;
}
</style>



 
<h2>@ViewData["Title"]</h2>




<div class="row">
    <div class="col-md-6">
        <!-- <input type="text" id="query" > -->
        <textarea rows="8" cols="63" id="query"></textarea>
        <a class="btn btn-success" id="runQuery">Run</a>
        <br/>
        <div class="loader" style="display:none"></div>
        <pre id="json-renderer" style="border-radius:0px;" ></pre>

    </div>
    <div class="col-md-6">
        <input type="text" id="chartQuery" >
        <a class="btn btn-success" id="runChartQuery">Visualize</a>
        <div id="cy"></div>
    </div>
</div>

@section Scripts {
    <script src="~/js/jquery.json-viewer.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.2.22/cytoscape.js"></script>

<script type="text/javascript">

$(function() {
    var data = {
        "message": "no data"
    };

    $('#json-renderer').jsonViewer(data);

    var cy = cytoscape({

        container: document.getElementById('cy'), // container to render in

        style: [ // the stylesheet for the graph
            {
            selector: 'node',
            style: {
                'background-color': '#666',
                'label': 'data(label)'
            }
            },

            {
            selector: 'edge',
            style: {
                'width': 3,
                'line-color': '#ccc',
                'target-arrow-color': '#ccc',
                'target-arrow-shape': 'triangle',
                'label': 'data(label)'
            }
            }
        ]

        

    });




    $('#runQuery').click(function(){

        debugger;

    var query = $('#query').val();
    $('.loader').show();

    $.ajax({
            url: "/home/gremlin?query="+query,
            type: "POST",
            }).done(function(data) {
               $('#json-renderer').jsonViewer(data);
               $('.loader').hide();
            }).error(function(message){
                $('#json-renderer').jsonViewer(message);
                $('.loader').hide();
            });

    });


    $('#runChartQuery').click(function(){
        debugger;

    var id = $('#chartQuery').val();    

    $.ajax({
            url: "/home/gremlin?query=g.V('"+id+"').both().as('v').project('vertex', 'edges').by(select('v')).by(bothE().fold())",
            type: "POST",
            }).done(function(data) {

                var list = [];

                data.forEach(element => {
                    
                    cy.add({ data: { id: element.vertex.Id   ,label:element.vertex.Label }});
                    
                    element.edges.forEach(elementEdge => {       
                        cy.add({ data: { id: elementEdge.InV.Id,label:elementEdge.InV.Label }});
                        cy.add({ data: { id: elementEdge.OutV.Id ,label:elementEdge.OutV.Label }});

                        list.push({ data: { id: elementEdge.Id,label:elementEdge.Label , source: elementEdge.InV.Id ,target:elementEdge.OutV.Id }});
                    });

                });

                list.forEach(element => {
                    cy.add(element);                    
                });

                var layout = cy.layout({ name: 'breadthfirst' });
                layout.run();

            }).error(function(message){
               alert('Error showing graph');
            });

    });


});




</script>

}